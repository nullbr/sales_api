name: Build and Deploy Code

on: [push, pull_request]

jobs:
  build:
    environment:
      name: Testing
    env:
      DATABASE_HOSTNAME: ${{secrets.DATABASE_HOSTNAME}}
      DATABASE_PORT: ${{secrets.DATABASE_PORT}}
      DATABASE_USERNAME: ${{secrets.DATABASE_USERNAME}}
      DATABASE_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
      DATABASE_NAME: ${{secrets.DATABASE_NAME}}
      SECRET_KEY: ${{secrets.SECRET_KEY}}
      ALGORITHM: ${{secrets.ALGORITHM}}
      ACCESS_TOKEN_EXIPE_MINUTES: ${{secrets.ACCESS_TOKEN_EXIPE_MINUTES}}
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
          POSTGRES_DB: ${{secrets.DATABASE_NAME}}_test
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    runs-on: ubuntu-latest
    steps:
      - name: pulling git repository
        uses: actions/checkout@v3
      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10' 
      - name: upgrade pip
        run: python -m pip install --upgrade pip
      - name: install all dependencies
        run: pip install -r requirements.txt
      - name: testing with pytest
        run: |
          python -m pip install pytest
          python -m pytest
      # - name: Login to Docker Hub
      #   uses: docker/login-action@v2
      #   with:
      #     username: ${{ secrets.DOCKER_HUB_USERNAME }}
      #     password: ${{ secrets.DOCKER_HUB_TOKEN }}
      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v2
      # - name: Build and push
      #   uses: docker/build-push-action@v4
      #   with:
      #     context: .
      #     file: ./Dockerfile
      #     builder: ${{ steps.buldx.outputs.name }}
      #     push: true
      #     tags: ${{ secrets.DOCKER_HUB_USERNAME }}/sales-api:latest
      #     cache-from: type=local,src=/tmp/.buildx-cache
      #     cache-o: type=local,dest=/tmp/.buildx-cache
      # - name: Image digest
      #   run: echo ${{ steps.docker_build.outputs.digest }}

  deploy:
    needs: [build]
    runs-on: ubuntu-latest
    environment:
      name: Production

    steps:
      - name: deploying to ubuntu server
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.PROD_UBUNTU_HOST }}
          username: ${{ secrets.PROD_UBUNTU_USERNAME }}
          password: ${{ secrets.PROD_UBUNTU_PASSWORD }}
          port: ${{ secrets.PROD_UBUNTU_PORT }}
          script: |
            cd sales-api/src
            git pull
            echo ${{ secrets.PROD_UBUNTU_PASSWORD }} | sudo -S systemctl restart sales-api